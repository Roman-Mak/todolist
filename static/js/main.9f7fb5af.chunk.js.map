{"version":3,"sources":["assets/img/tasks-preloader.svg","assets/img/todolists-preloader.svg","common/AddButton.tsx","components/AddNewItemForm.tsx","common/DeleteButton.tsx","components/TodoListTask.tsx","common/TasksPreloader.tsx","components/TodoListTasks.tsx","components/TodoListFooter.tsx","components/TodoListTitle.tsx","api.ts","redux/todoListReducer.ts","components/TodoList.tsx","common/TodoListsPreloader.tsx","App.tsx","serviceWorker.js","redux/store.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","AddButton","props","react_default","a","createElement","className","onClick","disabled","index_es","icon","faPlusSquare","AddNewItemForm","state","error","item","onAddItemClick","newItem","_this","setState","addItem","onItemChanged","e","currentTarget","value","onKeyPress","key","render","inputClass","type","placeholder","onChange","common_AddButton","isFetching","React","Component","DeleteButton","faTrash","TodoListTask","editMode","title","task","activateEditMode","deactivateEditMode","changeTitle","onIsDoneChanged","status","checked","changeStatus","onTitleChanged","deleteTask","id","statusTask","classNameTask","autoFocus","onBlur","common_DeleteButton","PreloaderTodoLists","Fragment","src","preloader","alt","style","width","height","TodoListTasks","taskElements","tasks","map","components_TodoListTask","tasksIsFetching","TasksPreloader","TodoListFooter","isHidden","onHideFilterClick","onShowFilterClick","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","changeTodoListTitle","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","addTodoList","newTodoListName","post","then","res","data","getTodoLists","get","todoListId","newTitle","put","concat","deleteTodoList","delete","getTasks","createTask","changeTask","obj","newTask","Object","objectSpread2","taskId","ADD_TODOLIST","ADD_TASK","CHANGE_TASK","DELETE_TASK","SET_TASKS","initialState","todoLists","todoListsIsFetching","todoListsIsFetchingSuccess","tasksIsFetchingSuccess","todoListReducer","newTodoList","arguments","length","undefined","action","toConsumableArray","t","filter","todo","taskIsFetching","TodoList","restoreState","addTask","taskFilter","newFilterValue","_this$props$tasks","display","marginBottom","components_TodoListTitle","components_AddNewItemForm","components_TodoListTasks","components_TodoListFooter","this","ConnectedTodoList","connect","dispatch","items","setTasksSuccess","resultCode","deleteTaskSuccess","changeTodoListTitleSuccess","deleteTodoListSuccess","TodoListsPreloader","marginTop","App","components_TodoList","common_TodoListsPreloader","ConnectedApp","todoList","Boolean","window","location","hostname","match","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f7fb5af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tasks-preloader.986e54dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/todolists-preloader.a67153fd.svg\";","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlusSquare} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype AddButtonType = {\r\n    onClick: () => void;\r\n    disabled: boolean;\r\n};\r\n\r\nconst AddButton = (props: AddButtonType) => {\r\n    return (\r\n        <button className=\"add-item\" onClick={props.onClick} disabled={props.disabled}>\r\n            <FontAwesomeIcon icon={faPlusSquare} className=\"plus-icon\"/>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default AddButton;","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport AddButton from \"../common/AddButton\";\r\n\r\ntype StateType = {\r\n    error: boolean;\r\n    item: string;\r\n}\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void;\r\n    placeholder: string;\r\n    isFetching: boolean;\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        error: false,\r\n        item: \"\"\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let newItem = this.state.item;\r\n        this.setState({item: \"\"});\r\n        if (newItem === \"\") {\r\n            this.setState({error: true});\r\n        } else {\r\n            this.setState({error: false});\r\n            this.props.addItem(newItem);\r\n        }\r\n    };\r\n\r\n    onItemChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            item: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let inputClass = this.state.error ? \"error\" : \"\";\r\n\r\n        return (\r\n                <div className=\"addNewTaskForm\">\r\n                    <input className={inputClass}\r\n                           type=\"text\"\r\n                           placeholder={this.props.placeholder}\r\n                           onChange={this.onItemChanged}\r\n                           onKeyPress={this.onKeyPress}\r\n                           value={this.state.item}\r\n                    />\r\n                    <AddButton onClick={this.onAddItemClick} disabled={this.props.isFetching}/>\r\n                </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AddNewItemForm;","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype DeleteButtonType = {\r\n    onClick: () => void;\r\n};\r\n\r\nconst DeleteButton = (props: DeleteButtonType) => {\r\n    return (\r\n        <button className=\"delete-item\" onClick={props.onClick}>\r\n            <FontAwesomeIcon icon={faTrash} className=\"trash-icon\"/>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default DeleteButton;","import React, {ChangeEvent} from \"react\";\r\nimport {TaskType} from \"../types/enities\";\r\nimport DeleteButton from \"../common/DeleteButton\";\r\n\r\ntype StateType = {\r\n    editMode: boolean;\r\n    title: string;\r\n}\r\n\r\ntype PropsType = {\r\n    task: TaskType;\r\n    changeStatus: (task: TaskType, status: number) => void;\r\n    changeTitle: (task: TaskType, title: string) => void;\r\n    deleteTask: (id: string) => void;\r\n}\r\n\r\nclass TodoListTask extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.props.changeTitle(this.props.task, this.state.title);\r\n        this.setState({editMode: false})\r\n    };\r\n\r\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2: 0;\r\n        this.props.changeStatus(this.props.task, status);\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    deleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id);\r\n    };\r\n\r\n    render = () => {\r\n        let statusTask = this.props.task.status;\r\n        let classNameTask = statusTask === 2 ? \"taskDone\" : \"\";\r\n\r\n        return (\r\n            <div className=\"todoList-task\">\r\n                <input onChange={this.onIsDoneChanged}\r\n                       type=\"checkbox\"\r\n                       checked={statusTask === 2}\r\n                />\r\n                {\r\n                    this.state.editMode\r\n                        ? <input value={this.state.title}\r\n                                 autoFocus={true}\r\n                                 onBlur={this.deactivateEditMode}\r\n                                 onChange={this.onTitleChanged}\r\n                        />\r\n                        : <span onClick={this.activateEditMode} className={classNameTask}>{this.state.title}</span>\r\n                }\r\n                <DeleteButton onClick={this.deleteTask}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import preloader from \"../assets/img/tasks-preloader.svg\";\r\nimport React from \"react\";\r\n\r\nconst PreloaderTodoLists = () => {\r\n    return (\r\n        <>\r\n            <img src={preloader} alt={\"loading\"}\r\n                 style={{width: 90, height: 24}}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PreloaderTodoLists;","import React from \"react\";\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport TasksPreloader from \"../common/TasksPreloader\";\r\nimport {TaskType} from \"../types/enities\";\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskType>;\r\n    changeStatus: (task: TaskType, status: number) => void;\r\n    changeTitle: (task: TaskType, title: string) => void;\r\n    deleteTask: (id: string) => void;\r\n    tasksIsFetching: boolean;\r\n};\r\n\r\nclass TodoListTasks extends React.Component<PropsType> {\r\n    render = () => {\r\n        let taskElements = this.props.tasks.map(task => {\r\n            return <TodoListTask task={task}\r\n                                 changeStatus={this.props.changeStatus}\r\n                                 changeTitle={this.props.changeTitle}\r\n                                 key={task.id}\r\n                                 deleteTask={this.props.deleteTask}\r\n            />\r\n        });\r\n\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                {this.props.tasksIsFetching ? <TasksPreloader/> : taskElements}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TodoListTasks;","import React from \"react\";\r\nimport {FilterValueType} from \"./TodoList\";\r\n\r\ntype StateType = {\r\n    isHidden: boolean;\r\n};\r\n\r\ntype PropsType = {\r\n    filterValue: FilterValueType;\r\n    changeFilter: (filter: FilterValueType) => void;\r\n};\r\n\r\nclass TodoListFooter extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        isHidden: false,\r\n    };\r\n\r\n    onHideFilterClick = () => {this.setState({isHidden: true})};\r\n    onShowFilterClick = () => {this.setState({isHidden: false})};\r\n    onAllFilterClick = () => {this.props.changeFilter(\"All\")};\r\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")};\r\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")};\r\n\r\n    render = () => {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden && <div>\r\n                <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\r\n                <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\r\n                <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\r\n                </div>}\r\n                {!this.state.isHidden && <span className=\"showHide\" onClick={this.onHideFilterClick}>hide buttons</span>}\r\n                {this.state.isHidden && <span className=\"showHide\" onClick={this.onShowFilterClick}>show buttons</span>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;","import React, {ChangeEvent} from \"react\";\r\n\r\ntype StateType = {\r\n    editMode: boolean;\r\n    title: string;\r\n}\r\n\r\ntype PropsType = {\r\n    title: string;\r\n    changeTodoListTitle: (title: string) => void;\r\n}\r\n\r\nclass TodoListTitle extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        editMode: false,\r\n        title: this.props.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.props.changeTodoListTitle(this.state.title);\r\n        this.setState({editMode: false})\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.editMode\r\n                        ? <input value={this.state.title}\r\n                                 autoFocus={true}\r\n                                 onBlur={this.deactivateEditMode}\r\n                                 onChange={this.onTitleChanged}\r\n                        />\r\n                        : <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.state.title}</h3>\r\n                }\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TodoListTitle;","import axios from \"axios\";\r\nimport {TaskType, TodoType, UpdateTaskType} from \"./types/enities\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"cd6b66cc-d0ef-4fb7-9f54-808df7c15bee\"}\r\n});\r\n\r\ntype CommonApiType<T> = {\r\n    resultCode: number;\r\n    messages: Array<string>;\r\n    data: T;\r\n}\r\n\r\ntype GetTasksType = {\r\n    totalCount: number;\r\n    error: string;\r\n    items: Array<TaskType>;\r\n}\r\n\r\nconst api = {\r\n    addTodoList(newTodoListName: string) {\r\n        return instance.post<CommonApiType<{ item: TodoType }>>(\"\", {title: newTodoListName})\r\n            .then(res => res.data);\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoType>>(\"\").then(res => res.data);\r\n    },\r\n    changeTodoListTitle(todoListId: string, newTitle: string) {\r\n        return instance.put<CommonApiType<{ item: TodoType }>>(`/${todoListId}`, {title: newTitle})\r\n            .then(res => res.data);\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`/${todoListId}`).then(res => res.data);\r\n    },\r\n\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksType>(`/${todoListId}/tasks`).then(res => res.data);\r\n    },\r\n    createTask(newTitle: string, todoListId: string) {\r\n        return instance.post<CommonApiType<{ item: TaskType }>>(`/${todoListId}/tasks`, {title: newTitle})\r\n            .then(res => res.data);\r\n    },\r\n    changeTask(task: TaskType, obj: UpdateTaskType) {\r\n        let newTask = {...task, ...obj};\r\n        return instance.put<CommonApiType<{ item: TaskType }>>(`/${task.todoListId}/tasks/${task.id}`, newTask)\r\n            .then(res => res.data);\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`/${todoListId}/tasks/${taskId}`,).then(res => res.data);\r\n    }\r\n};\r\n\r\nexport default api;","import api from \"../api\";\r\nimport {TaskType, TodoType, UpdateTaskType} from \"../types/enities\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst ADD_TODOLIST = \"todoList/todoListReducer/ADD-TODOLIST\";\r\nconst ADD_TASK = \"todoList/todoListReducer/ADD-TASK\";\r\nconst CHANGE_TASK = \"todoList/todoListReducer/CHANGE-TASK\";\r\nconst DELETE_TODOLIST = \"todoList/todoListReducer/DELETE-TODOLIST\";\r\nconst DELETE_TASK = \"todoList/todoListReducer/DELETE-TASK\";\r\nconst SET_TODOLISTS = \"todoList/todoListReducer/SET-TODOLISTS\";\r\nconst SET_TASKS = \"todoList/todoListReducer/SET-TASKS\";\r\nconst CHANGE_TODOLIST_TITLE = \"todoList/todoListReducer/CHANGE-TODOLIST-TITLE\";\r\nconst TODOLISTS_IS_FETCHING = \"todoList/todoListReducer/TODOLISTS-IS-FETCHING\";\r\nconst TASKS_IS_FETCHING = \"todoList/todoListReducer/TASKS-IS-FETCHING\";\r\n\r\nconst initialState = {\r\n    todoLists: [] as Array<TodoType>,\r\n    todoListsIsFetching: false\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst todoListReducer = (state: initialStateType = initialState, action: TodoActionTypes): initialStateType => {\r\n    let newTodoList;\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            newTodoList = [...state.todoLists, action.newTodoList];\r\n            return {...state, todoLists: newTodoList};\r\n        case ADD_TASK:\r\n            newTodoList = state.todoLists.map(t => {\r\n                if (t.id !== action.newTask.todoListId) {\r\n                    return t;\r\n                } else {\r\n                    return {...t, tasks: [...t.tasks, action.newTask]}\r\n                }\r\n            });\r\n            return {...state, todoLists: newTodoList};\r\n        case CHANGE_TASK:\r\n            newTodoList = state.todoLists.map(t => {\r\n                if (t.id !== action.task.todoListId) {\r\n                    return t;\r\n                } else {\r\n                    return {\r\n                        ...t, tasks: t.tasks.map(task => {\r\n                            if (task.id !== action.task.id) {\r\n                                return task;\r\n                            } else {\r\n                                return {...action.task}\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n            return {...state, todoLists: newTodoList};\r\n        case DELETE_TODOLIST:\r\n            newTodoList = state.todoLists.filter(t => t.id !== action.todoListId);\r\n            return {...state, todoLists: newTodoList};\r\n        case DELETE_TASK:\r\n            newTodoList = state.todoLists.map(t => {\r\n                if (t.id !== action.todoListId) {\r\n                    return t;\r\n                } else {\r\n                    return {...t, tasks: t.tasks.filter(task => task.id !== action.taskId)}\r\n                }\r\n            });\r\n            return {...state, todoLists: newTodoList};\r\n        case SET_TODOLISTS:\r\n            return {...state, todoLists: action.todoLists.map(todo => ({...todo, tasks: [], taskIsFetching: false}))};\r\n        case SET_TASKS:\r\n            return {\r\n                ...state, todoLists: state.todoLists.map(todo => {\r\n                    if (todo.id === action.todoListId) {\r\n                        return {...todo, tasks: action.tasks}\r\n                    } else return todo;\r\n                })\r\n            };\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return {\r\n                ...state, todoLists: state.todoLists.map(todo => {\r\n                    if (todo.id === action.todoListId) {\r\n                        return {...todo, title: action.newTitle}\r\n                    } else return todo;\r\n                })\r\n            };\r\n        case TODOLISTS_IS_FETCHING:\r\n            return {...state, todoListsIsFetching: action.isFetching};\r\n        case TASKS_IS_FETCHING:\r\n            return {...state, todoLists: state.todoLists.map(todo => {\r\n                    if (todo.id === action.todoListId) {\r\n                        return {...todo, taskIsFetching: action.isFetching}\r\n                    } else return todo;\r\n                })};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype TodoActionTypes =\r\n    AddTodoListSuccessType\r\n    | AddTaskSuccessType\r\n    | ChangeTaskSuccessType\r\n    | DeleteTodoListSuccessType\r\n    | DeleteTaskSuccessType\r\n    | SetTodoListsSuccessType\r\n    | SetTasksSuccessType\r\n    | changeTodoListTitleSuccessType\r\n    | TodoListsIsFetchingSuccessType\r\n    | TasksIsFetchingSuccessType;\r\n\r\ntype AddTodoListSuccessType = {\r\n    type: typeof ADD_TODOLIST;\r\n    newTodoList: TodoType;\r\n};\r\nconst addTodoListSuccess = (newTodoList: TodoType): AddTodoListSuccessType => ({type: ADD_TODOLIST, newTodoList});\r\n\r\ntype AddTaskSuccessType = {\r\n    type: typeof ADD_TASK;\r\n    newTask: TaskType;\r\n};\r\nconst addTaskSuccess = (newTask: TaskType): AddTaskSuccessType => ({type: ADD_TASK, newTask});\r\n\r\ntype ChangeTaskSuccessType = {\r\n    type: typeof CHANGE_TASK;\r\n    task: TaskType;\r\n};\r\nconst changeTaskSuccess = (task: TaskType): ChangeTaskSuccessType => ({type: CHANGE_TASK, task});\r\n\r\ntype DeleteTodoListSuccessType = {\r\n    type: typeof DELETE_TODOLIST;\r\n    todoListId: string;\r\n};\r\nconst deleteTodoListSuccess = (todoListId: string): DeleteTodoListSuccessType => ({type: DELETE_TODOLIST, todoListId});\r\n\r\ntype DeleteTaskSuccessType = {\r\n    type: typeof DELETE_TASK;\r\n    todoListId: string;\r\n    taskId: string;\r\n};\r\nconst deleteTaskSuccess = (todoListId: string, taskId: string): DeleteTaskSuccessType => ({\r\n    type: DELETE_TASK,\r\n    todoListId,\r\n    taskId\r\n});\r\n\r\ntype SetTodoListsSuccessType = {\r\n    type: typeof SET_TODOLISTS;\r\n    todoLists: Array<TodoType>;\r\n};\r\nconst setTodoListsSuccess = (todoLists: Array<TodoType>): SetTodoListsSuccessType => ({type: SET_TODOLISTS, todoLists});\r\n\r\ntype SetTasksSuccessType = {\r\n    type: typeof SET_TASKS;\r\n    todoListId: string;\r\n    tasks: Array<TaskType>\r\n};\r\nconst setTasksSuccess = (todoListId: string, tasks: Array<TaskType>): SetTasksSuccessType => ({\r\n    type: SET_TASKS,\r\n    todoListId,\r\n    tasks\r\n});\r\n\r\ntype changeTodoListTitleSuccessType = {\r\n    type: typeof CHANGE_TODOLIST_TITLE;\r\n    todoListId: string;\r\n    newTitle: string;\r\n};\r\nconst changeTodoListTitleSuccess = (todoListId: string, newTitle: string): changeTodoListTitleSuccessType => ({\r\n    type: CHANGE_TODOLIST_TITLE,\r\n    todoListId,\r\n    newTitle\r\n});\r\n\r\ntype TodoListsIsFetchingSuccessType = {\r\n    type: typeof TODOLISTS_IS_FETCHING;\r\n    isFetching: boolean;\r\n}\r\nconst todoListsIsFetchingSuccess = (isFetching: boolean): TodoListsIsFetchingSuccessType => ({\r\n    type: TODOLISTS_IS_FETCHING,\r\n    isFetching\r\n});\r\n\r\ntype TasksIsFetchingSuccessType = {\r\n    type: typeof TASKS_IS_FETCHING;\r\n    todoListId: string;\r\n    isFetching: boolean;\r\n}\r\nconst tasksIsFetchingSuccess = (todoListId: string, isFetching: boolean): TasksIsFetchingSuccessType => ({\r\n    type: TASKS_IS_FETCHING,\r\n    todoListId,\r\n    isFetching\r\n});\r\n\r\n\r\nexport const getTodoLists = () => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    dispatch(todoListsIsFetchingSuccess(true));\r\n    api.getTodoLists()\r\n        .then(res => {\r\n            dispatch(setTodoListsSuccess(res));\r\n            dispatch(todoListsIsFetchingSuccess(false));\r\n        });\r\n};\r\nexport const addTodoList = (newTodoListName: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    api.addTodoList(newTodoListName)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                let todoList = res.data.item;\r\n                dispatch(addTodoListSuccess(todoList));\r\n            }\r\n        })\r\n};\r\nexport const changeTodoListTitle = (todoListId: string, newTitle: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    api.changeTodoListTitle(todoListId, newTitle)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(changeTodoListTitleSuccess(todoListId, newTitle));\r\n            }\r\n        })\r\n};\r\nexport const deleteTodoList = (todoListId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    api.deleteTodoList(todoListId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(deleteTodoListSuccess(todoListId));\r\n            }\r\n        })\r\n};\r\nexport const getTasks = (todoListId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    dispatch(tasksIsFetchingSuccess(todoListId, true));\r\n    api.getTasks(todoListId)\r\n        .then(res => {\r\n            if (!res.error) {\r\n                let tasks = res.items;\r\n                dispatch(setTasksSuccess(todoListId, tasks));\r\n                dispatch(tasksIsFetchingSuccess(todoListId, false));\r\n            }\r\n        })\r\n};\r\nexport const addTask = (todoListId: string, newTitle: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    api.createTask(newTitle, todoListId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                let task = res.data.item;\r\n                dispatch(addTaskSuccess(task));\r\n            }\r\n        })\r\n};\r\nexport const changeTask = (task: TaskType, obj: UpdateTaskType) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    api.changeTask(task, obj)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(changeTaskSuccess(res.data.item));\r\n            }\r\n        })\r\n};\r\nexport const deleteTask = (todoListId: string, taskId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    api.deleteTask(todoListId, taskId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(deleteTaskSuccess(todoListId, taskId));\r\n            }\r\n        });\r\n};\r\n\r\nexport default todoListReducer;","import React from 'react';\r\nimport '../App.css';\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTask, changeTask, changeTodoListTitle, deleteTask, deleteTodoList, getTasks} from \"../redux/todoListReducer\";\r\nimport {TaskType, UpdateTaskType} from \"../types/enities\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport DeleteButton from \"../common/DeleteButton\";\r\n\r\ntype StateType = {\r\n    filterValue: FilterValueType;\r\n};\r\n\r\nexport type FilterValueType = \"All\" | \"Completed\" | \"Active\";\r\n\r\ntype OwnPropsType = {\r\n    id: string;\r\n    title: string;\r\n    tasks: Array<TaskType>;\r\n    tasksIsFetching: boolean;\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n    getTasks: (id: string) => void;\r\n    deleteTodoList: (id: string) => void;\r\n    changeTodoListTitle: (id: string, title: string) => void;\r\n    addTask: (id: string, title: string) => void;\r\n    deleteTask: (todoId: string, taskId: string) => void;\r\n    changeTask: (task: TaskType, obj: UpdateTaskType) => void;\r\n};\r\n\r\ntype PropsType = MapDispatchToPropsType & OwnPropsType;\r\n\r\nclass TodoList extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        filterValue: \"All\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    };\r\n    restoreState = () => {\r\n        this.props.getTasks(this.props.id);\r\n    };\r\n\r\n    deleteTodoList = () => {\r\n        this.props.deleteTodoList(this.props.id);\r\n    };\r\n    changeTodoListTitle = (newTitle: string) => {\r\n        this.props.changeTodoListTitle(this.props.id, newTitle);\r\n    };\r\n\r\n    addTask = (newTitle: string) => {\r\n        this.props.addTask(this.props.id, newTitle)\r\n    };\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTask(this.props.id, taskId);\r\n    };\r\n    taskFilter = (tasks: Array<TaskType>) => {\r\n        return tasks.filter(t => {\r\n            if (this.state.filterValue === \"All\") {\r\n                return true;\r\n            } else if (this.state.filterValue === \"Completed\") {\r\n                return t.status === 2;\r\n            } else if (this.state.filterValue === \"Active\") {\r\n                return t.status === 0;\r\n            }\r\n        });\r\n    };\r\n    changeFilter = (newFilterValue: FilterValueType) => {\r\n        this.setState({filterValue: newFilterValue})\r\n    };\r\n    changeStatus = (task: TaskType, status: number) => {\r\n        this.props.changeTask(task, {status});\r\n    };\r\n    changeTitle = (task: TaskType, title: string) => {\r\n        this.props.changeTask(task, {title});\r\n    };\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        return (\r\n            <div className=\"todoList\">\r\n                <div className=\"todoList-header\">\r\n                    <div style={{display: \"flex\", marginBottom: \"15px\"}}>\r\n                        <TodoListTitle title={this.props.title} changeTodoListTitle={this.changeTodoListTitle}/>\r\n                        <DeleteButton onClick={this.deleteTodoList}/>\r\n                    </div>\r\n                    <AddNewItemForm addItem={this.addTask} placeholder={\"new task\"}\r\n                                    isFetching={this.props.tasksIsFetching}/>\r\n                </div>\r\n                <TodoListTasks tasks={this.taskFilter(tasks)}\r\n                               changeStatus={this.changeStatus}\r\n                               changeTitle={this.changeTitle}\r\n                               deleteTask={this.deleteTask}\r\n                               tasksIsFetching={this.props.tasksIsFetching}\r\n                />\r\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst ConnectedTodoList = connect<{}, MapDispatchToPropsType, OwnPropsType, AppStateType>\r\n(null, {getTasks, addTask, changeTask, deleteTask,\r\n    changeTodoListTitle, deleteTodoList})(TodoList);\r\n\r\nexport default ConnectedTodoList;\r\n\r\n","import preloader from \"../assets/img/todolists-preloader.svg\";\r\nimport React from \"react\";\r\n\r\nconst TodoListsPreloader = () => {\r\n    return (\r\n        <>\r\n            <img src={preloader} alt={\"loading\"} style={{marginTop: 100}}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TodoListsPreloader;","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./components/TodoList\";\r\nimport AddNewItemForm from \"./components/AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodoList, getTodoLists} from \"./redux/todoListReducer\";\r\nimport TodoListsPreloader from \"./common/TodoListsPreloader\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport {TodoType} from \"./types/enities\";\r\n\r\ntype MapDispatchToPropsType = {\r\n    getTodoLists: () => void;\r\n    addTodoList: (title: string) => void;\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    todoLists: Array<TodoType>;\r\n    todoListsIsFetching: boolean;\r\n};\r\n\r\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\nclass App extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getTodoLists();\r\n    }\r\n\r\n    render = () => {\r\n        let todoLists = this.props.todoLists.map(t => {\r\n            return <TodoList key={t.id} id={t.id} title={t.title} tasks={t.tasks} tasksIsFetching={t.taskIsFetching}/>\r\n        });\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"headItemForm\">\r\n                    <span className=\"createTodoText\">Create new TodoList</span>\r\n                    <AddNewItemForm addItem={this.props.addTodoList} placeholder={\"new TodoList\"}\r\n                                    isFetching={this.props.todoListsIsFetching}/>\r\n                </div>\r\n                {\r\n                    this.props.todoListsIsFetching\r\n                    ? <TodoListsPreloader/>\r\n                    : <div className=\"todoLists\">{todoLists}</div>\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        todoLists: state.todoLists.todoLists,\r\n        todoListsIsFetching: state.todoLists.todoListsIsFetching\r\n    }\r\n};\r\n\r\nconst ConnectedApp = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\r\n(mapStateToProps, {addTodoList, getTodoLists})(App);\r\nexport default ConnectedApp;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport todoListReducer from \"./todoListReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nconst store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}