{"version":3,"sources":["common/LoginModal/LoginModal.module.css","assets/img/todolists-preloader.svg","assets/img/tasks-preloader.svg","common/TodoListsPreloader.tsx","components/Header.tsx","api/api.ts","redux/authReducer.ts","common/AddButton.tsx","components/AddNewItemForm.tsx","common/DeleteButton.tsx","components/TodoListTask.tsx","common/TasksPreloader.tsx","components/TodoListTasks.tsx","components/TodoListFooter.tsx","components/TodoListTitle.tsx","redux/todoListReducer.ts","components/TodoList.tsx","components/TodoLists.tsx","common/LoginModal/LoginModal.tsx","App.tsx","serviceWorker.js","redux/store.ts","index.tsx"],"names":["module","exports","background","modal","input","remember","__webpack_require__","p","TodoListsPreloader","react_default","a","createElement","Fragment","src","preloader","alt","style","marginTop","Header","_ref","isAuth","userLogout","dispatch","useDispatch","className","onClick","instance","axios","create","baseURL","withCredentials","headers","API-KEY","todoListsAPI","newTodoListName","post","title","then","res","data","get","todoListId","newTitle","put","concat","delete","tasksAPI","task","obj","newTask","Object","objectSpread2","id","taskId","authAPI","email","password","rememberMe","initialState","userId","login","isAuthFetching","setUserLoginData","type","payload","toggleIsAuth","authFetching","authReducer","state","arguments","length","undefined","action","AddButton","props","disabled","index_es","icon","faPlusSquare","AddNewItemForm","error","item","onAddItemClick","newItem","_this","setState","addItem","onItemChanged","e","currentTarget","value","onKeyPress","key","render","inputClass","placeholder","onChange","common_AddButton","isFetching","React","Component","DeleteButton","faTrash","TodoListTask","editMode","activateEditMode","deactivateEditMode","changeTitle","onIsDoneChanged","status","checked","changeStatus","onTitleChanged","deleteTask","statusTask","classNameTask","autoFocus","onBlur","common_DeleteButton","PreloaderTodoLists","width","height","TodoListTasks","taskElements","tasks","map","components_TodoListTask","tasksIsFetching","TasksPreloader","TodoListFooter","isHidden","onHideFilterClick","onShowFilterClick","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","changeTodoListTitle","ADD_TASK","SET_TASKS","todoLists","todoListsIsFetching","todoListsIsFetchingSuccess","tasksIsFetchingSuccess","todoListReducer","newTodoList","toConsumableArray","t","filter","todo","taskIsFetching","TodoList","restoreState","getTasks","deleteTodoList","addTask","taskFilter","newFilterValue","changeTask","_this$props$tasks","display","marginBottom","components_TodoListTitle","components_AddNewItemForm","components_TodoListTasks","components_TodoListFooter","this","ConnectedTodoList","connect","items","setTasksSuccess","resultCode","deleteTaskSuccess","changeTodoListTitleSuccess","deleteTodoListSuccess","TodoLists","components_TodoList","addTodoList","common_TodoListsPreloader","getTodoLists","todoList","LoginModal","_useState","useState","_useState2","slicedToArray","setEmail","_useState3","_useState4","setPassword","_useState5","_useState6","setRememberMe","styles","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","_data$data2","_email","wrap","_context2","prev","next","sent","t0","stop","_x2","apply","userLogin","App","common_LoginModal_LoginModal","components_Header","components_TodoLists","getUserLoginData","ConnectedApp","auth","_callee","_data$data","_context","messages","_x","_ref3","_callee3","_context3","_x3","Boolean","window","location","hostname","match","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa534f5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"LoginModal_background__Uuyqh\",\"modal\":\"LoginModal_modal__2PK2-\",\"input\":\"LoginModal_input__3Fh8l\",\"remember\":\"LoginModal_remember__3b5QP\"};","module.exports = __webpack_public_path__ + \"static/media/todolists-preloader.a67153fd.svg\";","module.exports = __webpack_public_path__ + \"static/media/tasks-preloader.986e54dc.svg\";","import preloader from \"../assets/img/todolists-preloader.svg\";\r\nimport React from \"react\";\r\n\r\nconst TodoListsPreloader = () => {\r\n    return (\r\n        <>\r\n            <img src={preloader} alt={\"loading\"} style={{marginTop: 100}}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TodoListsPreloader;","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean;\r\n    userLogout: () => void;\r\n};\r\n\r\nconst Header = ({isAuth, userLogout}: PropsType) => {\r\n    const dispatch = useDispatch();\r\n    const onUserLogoutClick = () => {\r\n        dispatch(userLogout);\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"header\">\r\n                {isAuth && <button onClick={onUserLogoutClick}>Log out</button>}\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Header;","import axios from \"axios\";\r\nimport {TaskType, TodoType, UpdateTaskType} from \"../types/enities\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"b29a2be9-93e2-498c-9365-70a515100fee\"}\r\n});\r\n\r\ntype CommonApiType<T> = {\r\n    resultCode: number;\r\n    messages: Array<string>;\r\n    data: T;\r\n}\r\n\r\ntype GetTasksType = {\r\n    totalCount: number;\r\n    error: string;\r\n    items: Array<TaskType>;\r\n}\r\n\r\nexport const todoListsAPI = {\r\n    addTodoList(newTodoListName: string) {\r\n        return instance.post<CommonApiType<{ item: TodoType }>>(\"/todo-lists\", {title: newTodoListName})\r\n            .then(res => res.data);\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoType>>(\"/todo-lists\").then(res => res.data);\r\n    },\r\n    changeTodoListTitle(todoListId: string, newTitle: string) {\r\n        return instance.put<CommonApiType<{ item: TodoType }>>(`/todo-lists/${todoListId}`, {title: newTitle})\r\n            .then(res => res.data);\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`/todo-lists/${todoListId}`).then(res => res.data);\r\n    }\r\n};\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksType>(`/todo-lists/${todoListId}/tasks`).then(res => res.data);\r\n    },\r\n    createTask(newTitle: string, todoListId: string) {\r\n        return instance.post<CommonApiType<{ item: TaskType }>>(`/todo-lists/${todoListId}/tasks`, {title: newTitle})\r\n            .then(res => res.data);\r\n    },\r\n    changeTask(task: TaskType, obj: UpdateTaskType) {\r\n        let newTask = {...task, ...obj};\r\n        return instance.put<CommonApiType<{ item: TaskType }>>(`/todo-lists/${task.todoListId}/tasks/${task.id}`, newTask)\r\n            .then(res => res.data);\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`/todo-lists/${todoListId}/tasks/${taskId}`,).then(res => res.data);\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<CommonApiType<{id: string; email: string; login: string}>>(`auth/me`).then(res => res.data);\r\n    },\r\n    authLogin(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe}).then(res => res.data);\r\n    },\r\n    authLogout() {\r\n        return instance.delete(`auth/login`).then(res => res.data);\r\n    }\r\n};","import {authAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst SET_USER_LOGIN_DATA = \"todoList/authReducer/SET-USER-LOGIN-DATA\";\r\nconst TOGGLE_IS_AUTH = \"todoList/authReducer/TOGGLE-IS-AUTH\";\r\nconst AUTH_FETCHING = \"todoList/authReducer/AUTH-FETCHING\";\r\n\r\nlet initialState = {\r\n    userId: \"\",\r\n    email: \"\",\r\n    login: \"\",\r\n    isAuth: false,\r\n    isAuthFetching: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: AuthActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_LOGIN_DATA:\r\n            return {...state, ...action.payload};\r\n        case TOGGLE_IS_AUTH :\r\n            return {...state, isAuth: action.isAuth};\r\n        case AUTH_FETCHING:\r\n            return {...state, isAuthFetching: action.isAuthFetching};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype AuthActionType = SetUserLoginDataType | ToggleIsAuthType | AuthFetchingType;\r\n\r\ntype SetUserLoginDataType = {type: typeof SET_USER_LOGIN_DATA; payload: {userId :string; email: string; login: string}};\r\nexport const setUserLoginData = (userId: string, email: string, login: string): SetUserLoginDataType => ({\r\n    type: SET_USER_LOGIN_DATA,\r\n    payload: {userId, email, login}\r\n});\r\n\r\ntype ToggleIsAuthType = {type: typeof TOGGLE_IS_AUTH; isAuth: boolean}\r\nexport const toggleIsAuth = (isAuth: boolean): ToggleIsAuthType => ({type: TOGGLE_IS_AUTH, isAuth});\r\n\r\ntype AuthFetchingType = {type: typeof AUTH_FETCHING; isAuthFetching: boolean};\r\nconst authFetching = (isAuthFetching: boolean): AuthFetchingType => ({type: AUTH_FETCHING, isAuthFetching});\r\n\r\n\r\nexport const getUserLoginData = (): ThunkAction<Promise<void>, AppStateType, unknown, AuthActionType> =>\r\n    async (dispatch) => {\r\n    dispatch(authFetching(true));\r\n    try {\r\n        const data = await authAPI.authMe();\r\n        if (data.resultCode === 0) {\r\n                let {id, email, login} = data.data;\r\n                dispatch(setUserLoginData(id, email, login));\r\n                dispatch(toggleIsAuth(true));\r\n                dispatch(authFetching(false));\r\n        } else if (data.messages[0] === \"You are not authorized\") {\r\n            dispatch(authFetching(false));\r\n        }\r\n    }\r\n    catch (e) {\r\n        dispatch(authFetching(false));\r\n    }\r\n};\r\n\r\nexport const userLogin = (email: string, password: string, rememberMe: boolean): ThunkAction<Promise<void>, AppStateType, unknown, AuthActionType> =>\r\n    async (dispatch) => {\r\n    dispatch(authFetching(true));\r\n    try {\r\n        const data = await authAPI.authLogin(email, password, rememberMe);\r\n        if (data.resultCode === 0) {\r\n            // await dispatch(getUserLoginData())\r\n            let {id, email, login} = data.data;\r\n            dispatch(setUserLoginData(id, email, login));\r\n            dispatch(toggleIsAuth(true));\r\n            dispatch(authFetching(false));\r\n        }\r\n    }\r\n    catch (e) {\r\n        dispatch(authFetching(false));\r\n    }\r\n};\r\nexport const userLogout = () => async (dispatch: Dispatch<AuthActionType>) => {\r\n    const data = await authAPI.authLogout();\r\n    if (data.resultCode === 0) {\r\n        dispatch(setUserLoginData(\"\", \"\", \"\"));\r\n        dispatch(toggleIsAuth(false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlusSquare} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype AddButtonType = {\r\n    onClick: () => void;\r\n    disabled: boolean;\r\n};\r\n\r\nconst AddButton = (props: AddButtonType) => {\r\n    return (\r\n        <button className=\"add-item\" onClick={props.onClick} disabled={props.disabled}>\r\n            <FontAwesomeIcon icon={faPlusSquare} className=\"plus-icon\"/>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default AddButton;","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport AddButton from \"../common/AddButton\";\r\n\r\ntype StateType = {\r\n    error: boolean;\r\n    item: string;\r\n}\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void;\r\n    placeholder: string;\r\n    isFetching: boolean;\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        error: false,\r\n        item: \"\"\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let newItem = this.state.item;\r\n        this.setState({item: \"\"});\r\n        if (newItem === \"\") {\r\n            this.setState({error: true});\r\n        } else {\r\n            this.setState({error: false});\r\n            this.props.addItem(newItem);\r\n        }\r\n    };\r\n\r\n    onItemChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            item: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let inputClass = this.state.error ? \"error\" : \"\";\r\n\r\n        return (\r\n                <div className=\"addNewTaskForm\">\r\n                    <input className={inputClass}\r\n                           type=\"text\"\r\n                           placeholder={this.props.placeholder}\r\n                           onChange={this.onItemChanged}\r\n                           onKeyPress={this.onKeyPress}\r\n                           value={this.state.item}\r\n                    />\r\n                    <AddButton onClick={this.onAddItemClick} disabled={this.props.isFetching}/>\r\n                </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AddNewItemForm;","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype DeleteButtonType = {\r\n    onClick: () => void;\r\n};\r\n\r\nconst DeleteButton = (props: DeleteButtonType) => {\r\n    return (\r\n        <button className=\"delete-item\" onClick={props.onClick}>\r\n            <FontAwesomeIcon icon={faTrash} className=\"trash-icon\"/>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default DeleteButton;","import React, {ChangeEvent} from \"react\";\r\nimport {TaskType} from \"../types/enities\";\r\nimport DeleteButton from \"../common/DeleteButton\";\r\n\r\ntype StateType = {\r\n    editMode: boolean;\r\n    title: string;\r\n}\r\n\r\ntype PropsType = {\r\n    task: TaskType;\r\n    changeStatus: (task: TaskType, status: number) => void;\r\n    changeTitle: (task: TaskType, title: string) => void;\r\n    deleteTask: (id: string) => void;\r\n}\r\n\r\nclass TodoListTask extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.props.changeTitle(this.props.task, this.state.title);\r\n        this.setState({editMode: false})\r\n    };\r\n\r\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2: 0;\r\n        this.props.changeStatus(this.props.task, status);\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    deleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id);\r\n    };\r\n\r\n    render = () => {\r\n        let statusTask = this.props.task.status;\r\n        let classNameTask = statusTask === 2 ? \"taskDone\" : \"\";\r\n\r\n        return (\r\n            <div className=\"todoList-task\">\r\n                <input onChange={this.onIsDoneChanged}\r\n                       type=\"checkbox\"\r\n                       checked={statusTask === 2}\r\n                />\r\n                {\r\n                    this.state.editMode\r\n                        ? <input value={this.state.title}\r\n                                 autoFocus={true}\r\n                                 onBlur={this.deactivateEditMode}\r\n                                 onChange={this.onTitleChanged}\r\n                        />\r\n                        : <span onClick={this.activateEditMode} className={classNameTask}>{this.state.title}</span>\r\n                }\r\n                <DeleteButton onClick={this.deleteTask}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import preloader from \"../assets/img/tasks-preloader.svg\";\r\nimport React from \"react\";\r\n\r\nconst PreloaderTodoLists = () => {\r\n    return (\r\n        <>\r\n            <img src={preloader} alt={\"loading\"}\r\n                 style={{width: 90, height: 24}}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PreloaderTodoLists;","import React from \"react\";\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport TasksPreloader from \"../common/TasksPreloader\";\r\nimport {TaskType} from \"../types/enities\";\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskType>;\r\n    changeStatus: (task: TaskType, status: number) => void;\r\n    changeTitle: (task: TaskType, title: string) => void;\r\n    deleteTask: (id: string) => void;\r\n    tasksIsFetching: boolean;\r\n};\r\n\r\nclass TodoListTasks extends React.Component<PropsType> {\r\n    render = () => {\r\n        let taskElements = this.props.tasks.map(task => {\r\n            return <TodoListTask task={task}\r\n                                 changeStatus={this.props.changeStatus}\r\n                                 changeTitle={this.props.changeTitle}\r\n                                 key={task.id}\r\n                                 deleteTask={this.props.deleteTask}\r\n            />\r\n        });\r\n\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                {this.props.tasksIsFetching ? <TasksPreloader/> : taskElements}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TodoListTasks;","import React from \"react\";\r\nimport {FilterValueType} from \"./TodoList\";\r\n\r\ntype StateType = {\r\n    isHidden: boolean;\r\n};\r\n\r\ntype PropsType = {\r\n    filterValue: FilterValueType;\r\n    changeFilter: (filter: FilterValueType) => void;\r\n};\r\n\r\nclass TodoListFooter extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        isHidden: false,\r\n    };\r\n\r\n    onHideFilterClick = () => {this.setState({isHidden: true})};\r\n    onShowFilterClick = () => {this.setState({isHidden: false})};\r\n    onAllFilterClick = () => {this.props.changeFilter(\"All\")};\r\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")};\r\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")};\r\n\r\n    render = () => {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden && <div>\r\n                <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\r\n                <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\r\n                <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\r\n                </div>}\r\n                {!this.state.isHidden && <span className=\"showHide\" onClick={this.onHideFilterClick}>hide buttons</span>}\r\n                {this.state.isHidden && <span className=\"showHide\" onClick={this.onShowFilterClick}>show buttons</span>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;","import React, {ChangeEvent} from \"react\";\r\n\r\ntype StateType = {\r\n    editMode: boolean;\r\n    title: string;\r\n}\r\n\r\ntype PropsType = {\r\n    title: string;\r\n    changeTodoListTitle: (title: string) => void;\r\n}\r\n\r\nclass TodoListTitle extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        editMode: false,\r\n        title: this.props.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.props.changeTodoListTitle(this.state.title);\r\n        this.setState({editMode: false})\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.editMode\r\n                        ? <input value={this.state.title}\r\n                                 autoFocus={true}\r\n                                 onBlur={this.deactivateEditMode}\r\n                                 onChange={this.onTitleChanged}\r\n                        />\r\n                        : <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.state.title}</h3>\r\n                }\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TodoListTitle;","import {todoListsAPI, tasksAPI} from \"../api/api\";\r\nimport {TaskType, TodoType, UpdateTaskType} from \"../types/enities\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst ADD_TODOLIST = \"todoList/tasksReducer/ADD-TODOLIST\";\r\nconst ADD_TASK = \"todoList/tasksReducer/ADD-TASK\";\r\nconst CHANGE_TASK = \"todoList/tasksReducer/CHANGE-TASK\";\r\nconst DELETE_TODOLIST = \"todoList/tasksReducer/DELETE-TODOLIST\";\r\nconst DELETE_TASK = \"todoList/tasksReducer/DELETE-TASK\";\r\nconst SET_TODOLISTS = \"todoList/tasksReducer/SET-TODOLISTS\";\r\nconst SET_TASKS = \"todoList/tasksReducer/SET-TASKS\";\r\nconst CHANGE_TODOLIST_TITLE = \"todoList/tasksReducer/CHANGE-TODOLIST-TITLE\";\r\nconst TODOLISTS_IS_FETCHING = \"todoList/tasksReducer/TODOLISTS-IS-FETCHING\";\r\nconst TASKS_IS_FETCHING = \"todoList/tasksReducer/TASKS-IS-FETCHING\";\r\n\r\nconst initialState = {\r\n    todoLists: [] as Array<TodoType>,\r\n    todoListsIsFetching: false\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst todoListReducer = (state: initialStateType = initialState, action: TodoActionTypes): initialStateType => {\r\n    let newTodoList;\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            newTodoList = [...state.todoLists, action.newTodoList];\r\n            return {...state, todoLists: newTodoList};\r\n        case ADD_TASK:\r\n            newTodoList = state.todoLists.map(t => {\r\n                if (t.id !== action.newTask.todoListId) {\r\n                    return t;\r\n                } else {\r\n                    return {...t, tasks: [...t.tasks, action.newTask]}\r\n                }\r\n            });\r\n            return {...state, todoLists: newTodoList};\r\n        case CHANGE_TASK:\r\n            newTodoList = state.todoLists.map(t => {\r\n                if (t.id !== action.task.todoListId) {\r\n                    return t;\r\n                } else {\r\n                    return {\r\n                        ...t, tasks: t.tasks.map(task => {\r\n                            if (task.id !== action.task.id) {\r\n                                return task;\r\n                            } else {\r\n                                return {...action.task}\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n            return {...state, todoLists: newTodoList};\r\n        case DELETE_TODOLIST:\r\n            newTodoList = state.todoLists.filter(t => t.id !== action.todoListId);\r\n            return {...state, todoLists: newTodoList};\r\n        case DELETE_TASK:\r\n            newTodoList = state.todoLists.map(t => {\r\n                if (t.id !== action.todoListId) {\r\n                    return t;\r\n                } else {\r\n                    return {...t, tasks: t.tasks.filter(task => task.id !== action.taskId)}\r\n                }\r\n            });\r\n            return {...state, todoLists: newTodoList};\r\n        case SET_TODOLISTS:\r\n            return {...state, todoLists: action.todoLists.map(todo => ({...todo, tasks: [], taskIsFetching: false}))};\r\n        case SET_TASKS:\r\n            return {\r\n                ...state, todoLists: state.todoLists.map(todo => {\r\n                    if (todo.id === action.todoListId) {\r\n                        return {...todo, tasks: action.tasks}\r\n                    } else return todo;\r\n                })\r\n            };\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return {\r\n                ...state, todoLists: state.todoLists.map(todo => {\r\n                    if (todo.id === action.todoListId) {\r\n                        return {...todo, title: action.newTitle}\r\n                    } else return todo;\r\n                })\r\n            };\r\n        case TODOLISTS_IS_FETCHING:\r\n            return {...state, todoListsIsFetching: action.isFetching};\r\n        case TASKS_IS_FETCHING:\r\n            return {...state, todoLists: state.todoLists.map(todo => {\r\n                    if (todo.id === action.todoListId) {\r\n                        return {...todo, taskIsFetching: action.isFetching}\r\n                    } else return todo;\r\n                })};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype TodoActionTypes =\r\n    AddTodoListSuccessType\r\n    | AddTaskSuccessType\r\n    | ChangeTaskSuccessType\r\n    | DeleteTodoListSuccessType\r\n    | DeleteTaskSuccessType\r\n    | SetTodoListsSuccessType\r\n    | SetTasksSuccessType\r\n    | changeTodoListTitleSuccessType\r\n    | TodoListsIsFetchingSuccessType\r\n    | TasksIsFetchingSuccessType;\r\n\r\ntype AddTodoListSuccessType = {\r\n    type: typeof ADD_TODOLIST;\r\n    newTodoList: TodoType;\r\n};\r\nconst addTodoListSuccess = (newTodoList: TodoType): AddTodoListSuccessType => ({type: ADD_TODOLIST, newTodoList});\r\n\r\ntype AddTaskSuccessType = {\r\n    type: typeof ADD_TASK;\r\n    newTask: TaskType;\r\n};\r\nconst addTaskSuccess = (newTask: TaskType): AddTaskSuccessType => ({type: ADD_TASK, newTask});\r\n\r\ntype ChangeTaskSuccessType = {\r\n    type: typeof CHANGE_TASK;\r\n    task: TaskType;\r\n};\r\nconst changeTaskSuccess = (task: TaskType): ChangeTaskSuccessType => ({type: CHANGE_TASK, task});\r\n\r\ntype DeleteTodoListSuccessType = {\r\n    type: typeof DELETE_TODOLIST;\r\n    todoListId: string;\r\n};\r\nconst deleteTodoListSuccess = (todoListId: string): DeleteTodoListSuccessType => ({type: DELETE_TODOLIST, todoListId});\r\n\r\ntype DeleteTaskSuccessType = {\r\n    type: typeof DELETE_TASK;\r\n    todoListId: string;\r\n    taskId: string;\r\n};\r\nconst deleteTaskSuccess = (todoListId: string, taskId: string): DeleteTaskSuccessType => ({\r\n    type: DELETE_TASK,\r\n    todoListId,\r\n    taskId\r\n});\r\n\r\ntype SetTodoListsSuccessType = {\r\n    type: typeof SET_TODOLISTS;\r\n    todoLists: Array<TodoType>;\r\n};\r\nconst setTodoListsSuccess = (todoLists: Array<TodoType>): SetTodoListsSuccessType => ({type: SET_TODOLISTS, todoLists});\r\n\r\ntype SetTasksSuccessType = {\r\n    type: typeof SET_TASKS;\r\n    todoListId: string;\r\n    tasks: Array<TaskType>\r\n};\r\nconst setTasksSuccess = (todoListId: string, tasks: Array<TaskType>): SetTasksSuccessType => ({\r\n    type: SET_TASKS,\r\n    todoListId,\r\n    tasks\r\n});\r\n\r\ntype changeTodoListTitleSuccessType = {\r\n    type: typeof CHANGE_TODOLIST_TITLE;\r\n    todoListId: string;\r\n    newTitle: string;\r\n};\r\nconst changeTodoListTitleSuccess = (todoListId: string, newTitle: string): changeTodoListTitleSuccessType => ({\r\n    type: CHANGE_TODOLIST_TITLE,\r\n    todoListId,\r\n    newTitle\r\n});\r\n\r\ntype TodoListsIsFetchingSuccessType = {\r\n    type: typeof TODOLISTS_IS_FETCHING;\r\n    isFetching: boolean;\r\n}\r\nconst todoListsIsFetchingSuccess = (isFetching: boolean): TodoListsIsFetchingSuccessType => ({\r\n    type: TODOLISTS_IS_FETCHING,\r\n    isFetching\r\n});\r\n\r\ntype TasksIsFetchingSuccessType = {\r\n    type: typeof TASKS_IS_FETCHING;\r\n    todoListId: string;\r\n    isFetching: boolean;\r\n}\r\nconst tasksIsFetchingSuccess = (todoListId: string, isFetching: boolean): TasksIsFetchingSuccessType => ({\r\n    type: TASKS_IS_FETCHING,\r\n    todoListId,\r\n    isFetching\r\n});\r\n\r\n\r\nexport const getTodoLists = () => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    dispatch(todoListsIsFetchingSuccess(true));\r\n    todoListsAPI.getTodoLists()\r\n        .then(res => {\r\n            dispatch(setTodoListsSuccess(res));\r\n            dispatch(todoListsIsFetchingSuccess(false));\r\n        });\r\n};\r\nexport const addTodoList = (newTodoListName: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    todoListsAPI.addTodoList(newTodoListName)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                let todoList = res.data.item;\r\n                dispatch(addTodoListSuccess(todoList));\r\n            }\r\n        })\r\n};\r\nexport const changeTodoListTitle = (todoListId: string, newTitle: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    todoListsAPI.changeTodoListTitle(todoListId, newTitle)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(changeTodoListTitleSuccess(todoListId, newTitle));\r\n            }\r\n        })\r\n};\r\nexport const deleteTodoList = (todoListId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    todoListsAPI.deleteTodoList(todoListId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(deleteTodoListSuccess(todoListId));\r\n            }\r\n        })\r\n};\r\nexport const getTasks = (todoListId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    dispatch(tasksIsFetchingSuccess(todoListId, true));\r\n    tasksAPI.getTasks(todoListId)\r\n        .then(res => {\r\n            if (!res.error) {\r\n                let tasks = res.items;\r\n                dispatch(setTasksSuccess(todoListId, tasks));\r\n                dispatch(tasksIsFetchingSuccess(todoListId, false));\r\n            }\r\n        })\r\n};\r\nexport const addTask = (todoListId: string, newTitle: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    tasksAPI.createTask(newTitle, todoListId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                let task = res.data.item;\r\n                dispatch(addTaskSuccess(task));\r\n            }\r\n        })\r\n};\r\nexport const changeTask = (task: TaskType, obj: UpdateTaskType) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    tasksAPI.changeTask(task, obj)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(changeTaskSuccess(res.data.item));\r\n            }\r\n        })\r\n};\r\nexport const deleteTask = (todoListId: string, taskId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n    tasksAPI.deleteTask(todoListId, taskId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(deleteTaskSuccess(todoListId, taskId));\r\n            }\r\n        });\r\n};\r\n\r\nexport default todoListReducer;","import React from 'react';\r\nimport '../App.css';\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTask, changeTask, changeTodoListTitle, deleteTask, deleteTodoList, getTasks} from \"../redux/todoListReducer\";\r\nimport {TaskType, UpdateTaskType} from \"../types/enities\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport DeleteButton from \"../common/DeleteButton\";\r\n\r\ntype StateType = {\r\n    filterValue: FilterValueType;\r\n};\r\n\r\nexport type FilterValueType = \"All\" | \"Completed\" | \"Active\";\r\n\r\ntype OwnPropsType = {\r\n    id: string;\r\n    title: string;\r\n    tasks: Array<TaskType>;\r\n    tasksIsFetching: boolean;\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n    getTasks: (id: string) => void;\r\n    deleteTodoList: (id: string) => void;\r\n    changeTodoListTitle: (id: string, title: string) => void;\r\n    addTask: (id: string, title: string) => void;\r\n    deleteTask: (todoId: string, taskId: string) => void;\r\n    changeTask: (task: TaskType, obj: UpdateTaskType) => void;\r\n};\r\n\r\ntype PropsType = MapDispatchToPropsType & OwnPropsType;\r\n\r\nclass TodoList extends React.Component<PropsType, StateType> {\r\n    state: StateType = {\r\n        filterValue: \"All\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    };\r\n    restoreState = () => {\r\n        this.props.getTasks(this.props.id);\r\n    };\r\n\r\n    deleteTodoList = () => {\r\n        this.props.deleteTodoList(this.props.id);\r\n    };\r\n    changeTodoListTitle = (newTitle: string) => {\r\n        this.props.changeTodoListTitle(this.props.id, newTitle);\r\n    };\r\n\r\n    addTask = (newTitle: string) => {\r\n        this.props.addTask(this.props.id, newTitle)\r\n    };\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTask(this.props.id, taskId);\r\n    };\r\n    taskFilter = (tasks: Array<TaskType>) => {\r\n        return tasks.filter(t => {\r\n            if (this.state.filterValue === \"All\") {\r\n                return true;\r\n            } else if (this.state.filterValue === \"Completed\") {\r\n                return t.status === 2;\r\n            } else if (this.state.filterValue === \"Active\") {\r\n                return t.status === 0;\r\n            }\r\n        });\r\n    };\r\n    changeFilter = (newFilterValue: FilterValueType) => {\r\n        this.setState({filterValue: newFilterValue})\r\n    };\r\n    changeStatus = (task: TaskType, status: number) => {\r\n        this.props.changeTask(task, {status});\r\n    };\r\n    changeTitle = (task: TaskType, title: string) => {\r\n        this.props.changeTask(task, {title});\r\n    };\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        return (\r\n            <div className=\"todoList\">\r\n                <div className=\"todoList-header\">\r\n                    <div style={{display: \"flex\", marginBottom: \"15px\"}}>\r\n                        <TodoListTitle title={this.props.title} changeTodoListTitle={this.changeTodoListTitle}/>\r\n                        <DeleteButton onClick={this.deleteTodoList}/>\r\n                    </div>\r\n                    <AddNewItemForm addItem={this.addTask} placeholder={\"new task\"}\r\n                                    isFetching={this.props.tasksIsFetching}/>\r\n                </div>\r\n                <TodoListTasks tasks={this.taskFilter(tasks)}\r\n                               changeStatus={this.changeStatus}\r\n                               changeTitle={this.changeTitle}\r\n                               deleteTask={this.deleteTask}\r\n                               tasksIsFetching={this.props.tasksIsFetching}\r\n                />\r\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst ConnectedTodoList = connect<{}, MapDispatchToPropsType, OwnPropsType, AppStateType>\r\n(null, {getTasks, addTask, changeTask, deleteTask,\r\n    changeTodoListTitle, deleteTodoList})(TodoList);\r\n\r\nexport default ConnectedTodoList;\r\n\r\n","import React from \"react\";\r\nimport TodoList from \"../components/TodoList\";\r\nimport AddNewItemForm from \"../components/AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodoList, getTodoLists} from \"../redux/todoListReducer\";\r\nimport TodoListsPreloader from \"../common/TodoListsPreloader\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {TodoType} from \"../types/enities\";\r\n\r\ntype MapDispatchToPropsType = {\r\n    getTodoLists: () => void;\r\n    addTodoList: (title: string) => void;\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    todoLists: Array<TodoType>;\r\n    todoListsIsFetching: boolean;\r\n};\r\n\r\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\nclass TodoLists extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getTodoLists();\r\n    }\r\n\r\n    render = () => {\r\n        let todoLists = this.props.todoLists.map(t => {\r\n            return <TodoList key={t.id} id={t.id} title={t.title} tasks={t.tasks} tasksIsFetching={t.taskIsFetching}/>\r\n        });\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"headItemForm\">\r\n                    <span className=\"createTodoText\">Create new TodoList</span>\r\n                    <AddNewItemForm addItem={this.props.addTodoList} placeholder={\"new TodoList\"}\r\n                                    isFetching={this.props.todoListsIsFetching}/>\r\n                </div>\r\n                {\r\n                    this.props.todoListsIsFetching\r\n                        ? <TodoListsPreloader/>\r\n                        : <div className=\"todoLists\">{todoLists}</div>\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        todoLists: state.todoLists.todoLists,\r\n        todoListsIsFetching: state.todoLists.todoListsIsFetching,\r\n    }\r\n};\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\r\n(mapStateToProps, {addTodoList, getTodoLists})(TodoLists);\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport styles from \"./LoginModal.module.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {userLogin} from \"../../redux/authReducer\";\r\n\r\ntype PropsType = {\r\n    email: string;\r\n    password: string;\r\n    isAuthFetching: boolean;\r\n};\r\n\r\nconst LoginModal = (props: PropsType) => {\r\n    const {isAuthFetching} = props;\r\n    const [email, setEmail] = useState<string>(props.email);\r\n    const [password, setPassword] = useState<string>(props.password);\r\n    const [rememberMe, setRememberMe] = useState<boolean>(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const onEmailChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    };\r\n    const onPasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    };\r\n    const onRememberMeChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRememberMe(e.currentTarget.checked)\r\n    };\r\n\r\n    const onLoginClick = () => {\r\n        dispatch(userLogin(email, password, rememberMe));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.background}/>\r\n            <div className={styles.modal}>\r\n                <div className={styles.input}>\r\n                    <span>E-mail: </span>\r\n                    <input type={\"email\"} placeholder={\"E-mail\"} value={email} onChange={onEmailChange}/>\r\n                </div>\r\n                <div className={styles.input}>\r\n                    <span>Password: </span>\r\n                    <input type={\"password\"} placeholder={\"Password\"} value={password} onChange={onPasswordChange}/>\r\n                </div>\r\n                <label className={styles.remember}>\r\n                    <input type={\"checkbox\"} checked={rememberMe} onChange={onRememberMeChange}/>\r\n                    <span>remember me</span>\r\n                </label>\r\n                <button onClick={onLoginClick} disabled={isAuthFetching}>Login</button>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default LoginModal;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {connect} from \"react-redux\";\r\nimport TodoListsPreloader from \"./common/TodoListsPreloader\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport Header from './components/Header';\r\nimport {getUserLoginData, userLogout} from \"./redux/authReducer\";\r\nimport TodoLists from \"./components/TodoLists\";\r\nimport LoginModal from \"./common/LoginModal/LoginModal\";\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserLoginData: () => void;\r\n    userLogout: () => void;\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean;\r\n    isAuthFetching: boolean;\r\n};\r\n\r\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\nclass App extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUserLoginData();\r\n    }\r\n\r\n    render = () => {\r\n        if (this.props.isAuthFetching) {\r\n            return <div className=\"app-container\"><TodoListsPreloader/></div>\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                {!this.props.isAuth && <LoginModal email={\"free@samuraijs.com\"} password={\"free\"}\r\n                                                   isAuthFetching={this.props.isAuthFetching}/>}\r\n                <Header isAuth={this.props.isAuth} userLogout={this.props.userLogout}/>\r\n                <TodoLists/>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        isAuthFetching: state.auth.isAuthFetching\r\n    }\r\n};\r\n\r\nconst ConnectedApp = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\r\n(mapStateToProps, {getUserLoginData, userLogout})(App);\r\nexport default ConnectedApp;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport todoListReducer from \"./todoListReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport authReducer from \"./authReducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListReducer,\r\n    auth: authReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nconst store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}